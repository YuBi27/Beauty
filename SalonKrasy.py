import asyncio
import logging
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command

# === –ù–ê–õ–ê–®–¢–£–í–ê–ù–ù–Ø ===
API_TOKEN = "8113426901:AAErFwTH485nUDkhKV0Co9tEupXSdwEU32M"
ADMIN_ID = 313113979  # —Ç–≤—ñ–π ID

logging.basicConfig(level=logging.INFO)

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –¢–∏–º—á–∞—Å–æ–≤–µ —Å—Ö–æ–≤–∏—â–µ
user_states = {}
appointments = {}  # {user_id: {"data": {...}, "status": "pending/approved/denied"}}

# === –ö–ù–û–ü–ö–ò ===
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üíÖ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø–æ—Å–ª—É–≥—É", callback_data="new_request")],
        [InlineKeyboardButton(text="üì© –ó–≤'—è–∑–æ–∫ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º", url="https://t.me/yuriiyurii27")]
    ])

def confirm_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∞–¥–º—ñ–Ω—É", callback_data="send_admin")],
        [InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel")]
    ])

def admin_reply_menu(user_id):
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –ü–æ–≥–æ–¥–∏—Ç–∏", callback_data=f"approve_{user_id}"),
            InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"deny_{user_id}")
        ]
    ])

def back_to_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚Ü©Ô∏è –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –≤ –º–µ–Ω—é", callback_data="back_to_menu")]
    ])

# === –°–¢–ê–†–¢ ===
@dp.message(Command("start"))
async def cmd_start(message: Message):
    user_states.pop(message.from_user.id, None)
    await message.answer(
        "üëã –í—ñ—Ç–∞—î–º–æ –≤ —Å–∞–ª–æ–Ω—ñ –∫—Ä–∞—Å–∏ üíñ\n"
        "–¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –ª–µ–≥–∫–æ –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ –ø–æ—Å–ª—É–≥–∏:\n"
        "üíÖ –ú–∞–Ω—ñ–∫—é—Ä\nü¶∂ –ü–µ–¥–∏–∫—é—Ä\nüíÜ –ö–æ—Å–º–µ—Ç–æ–ª–æ–≥\n\n"
        "–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –Ω–∏–∂—á–µ:",
        reply_markup=main_menu()
    )

# === –ù–û–í–ò–ô –ó–ê–ü–ò–° ===
@dp.callback_query(lambda c: c.data == "new_request")
async def start_request(callback: CallbackQuery):
    user_states[callback.from_user.id] = {"step": "ask_service", "data": {}}
    await callback.message.answer("üìå –û–±–µ—Ä—ñ—Ç—å –ø–æ—Å–ª—É–≥—É (–º–∞–Ω—ñ–∫—é—Ä / –ø–µ–¥–∏–∫—é—Ä / –∫–æ—Å–º–µ—Ç–æ–ª–æ–≥):")

# === –û–ë–†–û–ë–ö–ê –ö–†–û–ö–Ü–í ===
@dp.message()
async def handle_steps(message: Message):
    user_id = message.from_user.id
    if user_id not in user_states:
        await message.answer("ü§ñ –Ø –Ω–µ –∑—Ä–æ–∑—É–º—ñ–≤. –í–≤–µ–¥—ñ—Ç—å /start, —â–æ–± –ø–æ—á–∞—Ç–∏.")
        return

    state = user_states[user_id]
    step = state["step"]

    if step == "ask_service":
        state["data"]["service"] = message.text
        state["step"] = "ask_date"
        await message.answer("üìÖ –í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ (—É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†):")

    elif step == "ask_date":
        try:
            date_obj = datetime.strptime(message.text, "%d.%m.%Y")
            state["data"]["date"] = date_obj
            state["step"] = "ask_time"
            await message.answer("‚è∞ –í–∫–∞–∂—ñ—Ç—å —á–∞—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∏ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 14:30):")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –î–î.–ú–ú.–†–†–†–†")

    elif step == "ask_time":
        try:
            datetime.strptime(message.text, "%H:%M")
            state["data"]["time"] = message.text
            state["step"] = "ask_contact"
            await message.answer("üì± –í–∫–∞–∂—ñ—Ç—å –≤–∞—à—ñ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ (—Ç–µ–ª–µ—Ñ–æ–Ω –∞–±–æ Telegram):")
        except ValueError:
            await message.answer("‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —á–∞—Å—É! –í–≤–µ–¥—ñ—Ç—å —É —Ñ–æ—Ä–º–∞—Ç—ñ –ì–ì:–•–•")

    elif step == "ask_contact":
        state["data"]["contact"] = message.text
        state["step"] = "confirm"
        data = state["data"]
        summary = (
            f"üìã <b>–í–∞—à –∑–∞–ø–∏—Å:</b>\n\n"
            f"üíÖ –ü–æ—Å–ª—É–≥–∞: {data['service']}\n"
            f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
            f"‚è∞ –ß–∞—Å: {data['time']}\n"
            f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}\n\n"
            "–Ø–∫—â–æ –≤—Å–µ –≤—ñ—Ä–Ω–æ ‚Äî –ø—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å:"
        )
        await message.answer(summary, reply_markup=confirm_menu(), parse_mode="HTML")

# === –í–Ü–î–ü–†–ê–í–ò–¢–ò –ê–î–ú–Ü–ù–£ ===
@dp.callback_query(lambda c: c.data == "send_admin")
async def send_admin(callback: CallbackQuery):
    user_id = callback.from_user.id
    state = user_states.get(user_id)

    if not state or state["step"] != "confirm":
        await callback.answer("üö´ –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø–∏—Å—É.", show_alert=True)
        return

    data = state["data"]
    appointments[user_id] = {"data": data, "status": "pending"}

    text = (
        f"üì® <b>–ù–æ–≤–∏–π –∑–∞–ø–∏—Å –≤—ñ–¥ @{callback.from_user.username or callback.from_user.full_name}:</b>\n\n"
        f"üíÖ –ü–æ—Å–ª—É–≥–∞: {data['service']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
        f"‚è∞ –ß–∞—Å: {data['time']}\n"
        f"üì± –ö–æ–Ω—Ç–∞–∫—Ç: {data['contact']}"
    )

    await bot.send_message(ADMIN_ID, text, parse_mode="HTML", reply_markup=admin_reply_menu(user_id))
    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º—ñ–Ω—É. –û—á—ñ–∫—É–π—Ç–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è.", reply_markup=back_to_menu())
    user_states.pop(user_id, None)

# === –ê–î–ú–Ü–ù –ü–Ü–î–¢–í–ï–†–î–ñ–£–Ñ –ó–ê–ü–ò–° ===
@dp.callback_query(F.data.startswith("approve_"))
async def approve_request(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])
    appointment = appointments.get(user_id)

    if not appointment:
        await callback.answer("–ó–∞–ø–∏—Å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
        return

    appointment["status"] = "approved"
    data = appointment["data"]

    # –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–ª—ñ—î–Ω—Ç—É
    await bot.send_message(
        user_id,
        f"‚úÖ –í–∞—à –∑–∞–ø–∏—Å –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ!\n\n"
        f"üíÖ –ü–æ—Å–ª—É–≥–∞: {data['service']}\n"
        f"üìÖ –î–∞—Ç–∞: {data['date'].strftime('%d.%m.%Y')}\n"
        f"‚è∞ –ß–∞—Å: {data['time']}"
    )

    await callback.message.edit_text(f"‚úÖ –í–∏ –ø–æ–≥–æ–¥–∏–ª–∏ –∑–∞–ø–∏—Å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ {user_id}")

    # –ó–∞–ø—É—Å–∫ –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
    asyncio.create_task(schedule_reminders(user_id, data))

# === –ê–î–ú–Ü–ù –í–Ü–î–•–ò–õ–Ø–Ñ –ó–ê–ü–ò–° ===
@dp.callback_query(F.data.startswith("deny_"))
async def deny_request(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[1])

    await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥—ñ—Ç—å –ø—Ä–∏—á–∏–Ω—É –≤—ñ–¥–º–æ–≤–∏:")
    appointments[user_id]["status"] = "awaiting_reason"
    appointments[user_id]["admin_msg_id"] = callback.message.message_id

@dp.message()
async def get_denial_reason(message: Message):
    # –Ø–∫—â–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä –≤–≤–æ–¥–∏—Ç—å –ø—Ä–∏—á–∏–Ω—É
    if message.from_user.id == ADMIN_ID:
        for uid, app in appointments.items():
            if app.get("status") == "awaiting_reason":
                reason = message.text
                app["status"] = "denied"
                await bot.send_message(uid, f"‚ùå –í–∞—à –∑–∞–ø–∏—Å –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.\n–ü—Ä–∏—á–∏–Ω–∞: {reason}")
                await message.answer("üö´ –í—ñ–¥–º–æ–≤—É –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É.")
                return

# === –ù–ê–ì–ê–î–£–í–ê–ù–ù–Ø ===
async def schedule_reminders(user_id, data):
    appointment_datetime = datetime.strptime(
        f"{data['date'].strftime('%d.%m.%Y')} {data['time']}", "%d.%m.%Y %H:%M"
    )

    one_day_before = appointment_datetime - timedelta(days=1)
    one_hour_before = appointment_datetime - timedelta(hours=1)

    now = datetime.now()
    delay_day = (one_day_before - now).total_seconds()
    delay_hour = (one_hour_before - now).total_seconds()

    async def send_reminder(delay, text):
        if delay > 0:
            await asyncio.sleep(delay)
            await bot.send_message(user_id, text)

    asyncio.create_task(send_reminder(delay_day, "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ó–∞–≤—Ç—Ä–∞ —É –≤–∞—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ üíÖ"))
    asyncio.create_task(send_reminder(delay_hour, "‚è∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è! –ß–µ—Ä–µ–∑ –≥–æ–¥–∏–Ω—É —É –≤–∞—Å –ø—Ä–æ—Ü–µ–¥—É—Ä–∞ üíñ"))

# === –ü–û–í–ï–†–ù–ï–ù–ù–Ø –í –ú–ï–ù–Æ ===
@dp.callback_query(lambda c: c.data == "back_to_menu")
async def back_to_main(callback: CallbackQuery):
    user_states.pop(callback.from_user.id, None)
    await callback.message.edit_text("üîô –í–∏ –ø–æ–≤–µ—Ä–Ω—É–ª–∏—Å—è –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é.", reply_markup=main_menu())

# === –°–ö–ê–°–£–í–ê–ù–ù–Ø ===
@dp.callback_query(lambda c: c.data == "cancel")
async def cancel(callback: CallbackQuery):
    user_states.pop(callback.from_user.id, None)
    await callback.message.edit_text("‚ùå –ó–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())

# === –ó–ê–ü–£–°–ö ===
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
 